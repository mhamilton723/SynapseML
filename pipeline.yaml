resources:
- repo: self

trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md
    - docs/*
    - CODEOWNERS

pr:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md
    - docs/*
    - CODEOWNERS

variables:
  runTests: True

jobs:
- job: Style
  cancelTimeoutInMinutes: 0
  condition: eq(variables.runTests, 'True')
  pool:
    vmImage: ubuntu-16.04
  steps:
  - task: AzureCLI@1
    displayName: 'Style Check'
    inputs:
      azureSubscription: 'Findable Incubation(ca9d21ff-2a46-4e8b-bf06-8d65242342e5)'
      scriptLocation: inlineScript
      inlineScript: 'sbt scalastyle test:scalastyle it:scalastyle'

- job: PublishAndE2E
  cancelTimeoutInMinutes: 0
  pool:
    vmImage: ubuntu-16.04
  steps:
    - bash: echo "##vso[task.prependpath]$CONDA/bin"
      displayName: Add conda to PATH
    - bash: conda env create -f environment.yaml
      displayName: Create Anaconda environment
    - task: AzureKeyVault@1
      inputs:
        azureSubscription: 'Findable Incubation(ca9d21ff-2a46-4e8b-bf06-8d65242342e5)'
        keyVaultName: mmlspark-keys
    - bash: |
        source activate mmlspark
        sbt packagePython
        sbt publishBlob publishDocs publishR
        sbt genBuildInfo
        echo "##vso[task.uploadsummary]$(pwd)/target/Build.md"
      displayName: Publish Artifacts
      env:
        STORAGE_KEY: $(storage-key)
    - bash: sbt publishBadges
      #condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      displayName: Publish Badges
      env:
        STORAGE_KEY: $(storage-key)
    - task: AzureCLI@1
      displayName: 'E2E'
      inputs:
        azureSubscription: 'Findable Incubation(ca9d21ff-2a46-4e8b-bf06-8d65242342e5)'
        scriptLocation: inlineScript
        inlineScript: 'sbt it:test'
      condition: eq(variables.runTests, 'True')
    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFiles: '**/test-reports/TEST-*.xml'
        failTaskOnFailedTests: true
      condition: and(eq(variables.runTests, 'True'), succeededOrFailed())

- job: Release
  cancelTimeoutInMinutes: 0
  pool:
    vmImage: ubuntu-16.04
  steps:
    - bash: |
        echo '##vso[task.setvariable variable=tag]'$(git tag -l --points-at HEAD)
      displayName: 'Get Git Tag'
    - bash: |
        wget https://github.com/git-chglog/git-chglog/releases/download/0.8.0/git-chglog_linux_amd64
        chmod +x git-chglog_linux_amd64
        ./git-chglog_linux_amd64 -o CHANGELOG.md $TAG
      condition: startsWith(variables['tag'], 'v')
    - task: GitHubRelease@0
      condition: startsWith(variables['tag'], 'v')
      inputs:
        gitHubConnection: 'MMLSPark Github via PAT'
        repositoryName: '$(Build.Repository.Name)'
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: 'auto'
        releaseNotesFile: 'CHANGELOG.md'
        isDraft: true

- job: PythonTests
  cancelTimeoutInMinutes: 0
  condition: eq(variables.runTests, 'True')
  pool:
    vmImage: ubuntu-16.04
  steps:
    - bash: echo "##vso[task.prependpath]$CONDA/bin"
      displayName: Add conda to PATH
    - bash: conda env create -f environment.yaml
      displayName: Create Anaconda environment
    - bash: |
        source activate mmlspark
        sbt coverage testPython
      displayName: Test Python Code
    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFiles: '**/python-test-*.xml'
        failTaskOnFailedTests: true
      condition: succeededOrFailed()
    - task: AzureCLI@1
      displayName: 'Generate Codecov report'
      inputs:
        azureSubscription: 'Findable Incubation(ca9d21ff-2a46-4e8b-bf06-8d65242342e5)'
        scriptLocation: inlineScript
        inlineScript: 'sbt coverageReport'
      condition: succeededOrFailed()
    - task: AzureKeyVault@1
      inputs:
        azureSubscription: 'Findable Incubation(ca9d21ff-2a46-4e8b-bf06-8d65242342e5)'
        keyVaultName: mmlspark-keys
      condition: succeededOrFailed()
    - bash: |
        curl -s https://codecov.io/bash > .codecov
        chmod +x .codecov
        echo "Starting Codecov Upload"
        ./.codecov -t $(codecov-token) -f coverage.xml -F python
        ./.codecov -t $(codecov-token) -f target/scala-2.11/coverage-report/cobertura.xml -F scala
      displayName: Upload Coverage Report To Codecov.io
      condition: succeededOrFailed()

- job: UnitTests
  cancelTimeoutInMinutes: 1
  condition: eq(variables.runTests, 'True')
  pool:
    vmImage: ubuntu-16.04
  strategy:
    matrix:
      automl:
        PACKAGE: "automl"
      cntk:
        PACKAGE: "cntk"
      cognitive:
        PACKAGE: "cognitive"
      core:
        PACKAGE: "core"
      downloader:
        PACKAGE: "downloader"
      featurize:
        PACKAGE: "featurize"
      image:
        PACKAGE: "image"
      io:
        PACKAGE: "io"
        FLAKY: "true"
      flaky:
        PACKAGE: "flaky"           #TODO fix flaky test so isolation is not needed
        FLAKY: "true"
      lightgbm1:
        PACKAGE: "lightgbm.split1" #TODO speed up LGBM Tests and remove split
        FLAKY: "true"
      lightgbm2:
        PACKAGE: "lightgbm.split2"
        FLAKY: "true"
      lime:
        PACKAGE: "lime"
      opencv:
        PACKAGE: "opencv"
      recommendation:
        PACKAGE: "recommendation"
      stages:
        PACKAGE: "stages"
      train:
        PACKAGE: "train"
      vw:
        PACKAGE: "vw"
  steps:
    - task: AzureCLI@1
      displayName: 'Setup repo'
      inputs:
        azureSubscription: 'Findable Incubation(ca9d21ff-2a46-4e8b-bf06-8d65242342e5)'
        scriptLocation: inlineScript
        inlineScript: |
          (timeout 30 pip install requests) || (echo "retrying" && timeout 30 pip install requests)
          (timeout 200 sbt setup) || (echo "retrying" && timeout 200 sbt setup)
    - task: AzureCLI@1
      displayName: 'Unit Test'
      timeoutInMinutes: 40
      inputs:
        azureSubscription: 'Findable Incubation(ca9d21ff-2a46-4e8b-bf06-8d65242342e5)'
        scriptLocation: inlineScript
        inlineScript: |
          (timeout 20m sbt coverage "testOnly com.microsoft.ml.spark.$(PACKAGE).**") ||
          (${FLAKY:-false} && timeout 20m sbt coverage "testOnly com.microsoft.ml.spark.$(PACKAGE).**")
    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFiles: '**/test-reports/TEST-*.xml'
        failTaskOnFailedTests: true
      condition: succeededOrFailed()
    - task: AzureCLI@1
      displayName: 'Generate Codecov report'
      inputs:
        azureSubscription: 'Findable Incubation(ca9d21ff-2a46-4e8b-bf06-8d65242342e5)'
        scriptLocation: inlineScript
        inlineScript: 'sbt coverageReport'
      condition: succeededOrFailed()
    - task: AzureKeyVault@1
      inputs:
        azureSubscription: 'Findable Incubation(ca9d21ff-2a46-4e8b-bf06-8d65242342e5)'
        keyVaultName: mmlspark-keys
      condition: succeededOrFailed()
    - bash: |
        curl -s https://codecov.io/bash > .codecov
        chmod +x .codecov
        echo "Starting Codecov Upload"
        ./.codecov -t $(codecov-token) -F scala
      displayName: Upload Coverage Report To Codecov.io
      condition: succeededOrFailed()
